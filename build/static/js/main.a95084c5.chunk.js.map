{"version":3,"sources":["Todo.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","List","className","ListItem","ListItemText","primary","secondary","text","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTopdos","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","FormControl","InputLabel","Input","onChange","e","target","value","Button","type","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","addTodo","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGe,SAASA,EAAKC,GACzB,OACE,cAACC,EAAA,EAAD,CAAMC,UAAW,YAAjB,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAcC,QAAQ,OAAOC,UAAWN,EAAMO,W,kBCU7CC,GAZKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGRR,IAASS,aC8BLC,MAvCf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAMC,EAAN,KAAaC,EAAb,KACA,EAAyBF,mBAAS,IAAlC,mBAAMG,EAAN,KAAaC,EAAb,KAiBA,OAfAC,qBAAU,WACPjB,EAAGkB,WAAW,SAASC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAC7DP,EAAUO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAGA,EAAIC,OAAOC,cAEhD,IAYA,sBAAKhC,UAAU,MAAf,UACE,yDACA,iCACA,eAACiC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,4BACA,cAACC,EAAA,EAAD,CAAOC,SAAU,SAACC,GAAD,OAAKf,EAASe,EAAEC,OAAOC,QAAQA,MAAOlB,OAEzD,cAACmB,EAAA,EAAD,CAAQC,KAAK,SAASC,UAAWrB,EAAOsB,QAAS,SAACN,GAAD,OAjBrC,SAACA,GACfA,EAAEO,iBAEFtC,EAAGkB,WAAW,SAASqB,IAAI,CACzBb,KAAMX,EACNyB,UAAWvC,IAASS,UAAU+B,WAAWC,oBAE3C1B,EAAS,IAU+C2B,CAAQZ,IAAIa,QAAQ,YAAYC,MAAM,UAA5F,yBAEA,6BAEIhC,EAAMU,KAAI,SAACG,GAAD,OAAS,cAACnC,EAAD,CAAMQ,KAAM2B,aC1B1BoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a95084c5.chunk.js","sourcesContent":["import { List, ListItem, ListItemText } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport default function Todo(props) {\r\n    return (\r\n      <List className={'todo_list'}>\r\n          <ListItem>\r\n              <ListItemText primary='Todo' secondary={props.text}/>\r\n          </ListItem>\r\n      </List>\r\n    )\r\n}\r\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// const firebaseConfig = {\r\n //   };\r\nimport firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCfFy36pxGEWs1s7qhxCiD2-oD79dpXJYM\",\r\n    authDomain: \"to-do-app-50f01.firebaseapp.com\",\r\n    projectId: \"to-do-app-50f01\",\r\n    storageBucket: \"to-do-app-50f01.appspot.com\",\r\n    messagingSenderId: \"718919010590\",\r\n    appId: \"1:718919010590:web:527ef7f89a0cfbfcff610f\",\r\n    measurementId: \"G-N8XHVQNPQZ\"\r\n})\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default db;","import {useEffect, useState} from 'react'\nimport {Button, FormControl, Input, InputLabel} from '@material-ui/core'\nimport Todo from './Todo'\nimport './App.css';\nimport db from './firebase'\nimport firebase from 'firebase'\nfunction App() {\n  \n  const[todos, setTopdos] = useState([]);\n  const[input, setInput] = useState('');\n\n  useEffect(()=>{\n     db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot=>{\n       setTopdos(snapshot.docs.map(doc=> doc.data().todo))\n     })\n  },[] )\n\n  const addTodo = (e) =>{\n    e.preventDefault(); // dont refresh the page\n    // setTopdos([...todos, input])\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp() \n    })\n    setInput('')\n  }\n  return (\n    <div className=\"App\">\n      <h1>hello clever programmer</h1>\n      <form>\n      <FormControl>\n        <InputLabel>Write a to do</InputLabel>\n        <Input onChange={(e)=>setInput(e.target.value)} value={input}/>\n      </FormControl>\n      <Button type='submit' disabled={!input} onClick={(e)=>addTodo(e)} variant='contained' color='primary'>Add Todo</Button>\n      </form>\n      <ul>\n        {\n          todos.map((todo) =><Todo text={todo}/>)\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}